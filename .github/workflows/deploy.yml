name: Deploy to EC2

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  USE_MODEL_URL: "https://tfhub.dev/google/universal-sentence-encoder/4"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check models
        run: |
          python models/check_models.py

      - name: Pre-download USE model
        run: |
          python -c "import tensorflow_hub as hub; hub.load('${{ env.USE_MODEL_URL }}')"

      - name: Run tests
        run: |
          pytest tests/ -v

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: question-classifier
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --build-arg USE_MODEL_URL=${{ env.USE_MODEL_URL }} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Login to ECR
            aws ecr get-login-password --region eu-west-3 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

            # Pull and run new image
            docker pull ${{ steps.login-ecr.outputs.registry }}/question-classifier:${{ github.sha }}
            docker stop question-classifier || true
            docker rm question-classifier || true
            docker run -d \
              --name question-classifier \
              -p 3000:3000 \
              -e USE_MODEL_URL=${{ env.USE_MODEL_URL }} \
              ${{ steps.login-ecr.outputs.registry }}/question-classifier:${{ github.sha }}

            # Wait for health check
            timeout=300
            while [ $timeout -gt 0 ]; do
              if curl -f http://localhost:3000/health; then
                echo "Application is healthy"
                exit 0
              fi
              sleep 5
              timeout=$((timeout-5))
            done
            echo "Health check failed"
            exit 1
